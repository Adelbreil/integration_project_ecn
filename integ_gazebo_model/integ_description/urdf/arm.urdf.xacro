<?xml version="1.0"?>
<robot name="arm" xmlns:xacro="http://www.ros.org/wiki/xacro">
	

 <!-- 	___________Geometrical properties___________	-->


  <xacro:arg name="mass_1" default="1."/>
  <xacro:arg name="mass_2" default="0.5"/>
  <xacro:arg name="length_1" default="0.8"/>
  <xacro:arg name="length_2" default="0.6"/>

  

  <xacro:property name="PI" value="3.14159265359"/>
  <xacro:property name="side" value="0.04"/>
  <xacro:property name="joint_radius" value="0.036"/>
  <xacro:property name="joint_length" value="0.05"/>
  <xacro:property name="mass_1" value="$(arg mass_1)"/>
  <xacro:property name="mass_2" value="$(arg mass_2)"/>
  <xacro:property name="length_1" value="$(arg length_1)"/>
  <xacro:property name="length_2" value="$(arg length_2)"/>
  <xacro:property name="camera_link" value="0.05"/>
  <xacro:property name="axel_offset" value="0.05"/>
  <xacro:property name="height3" value="1"/>
  
  
  <xacro:arg name="ixx_1" default="'${(mass_1/12)*(side*side+length_1*length_1)}'"/>
  <xacro:arg name="iyy_1" default="'${(mass_1/12)*(side*side+length_1*length_1)}'"/>
  <xacro:arg name="izz_1" default="'${(mass_1/6)*(side*side)}'"/> 
  <xacro:arg name="ixx_2" default="'${(mass_2/12)*(side*side+length_2*length_2)}'"/>
  <xacro:arg name="iyy_2" default="'${(mass_2/12)*(side*side+length_2*length_2)}'"/>  
  <xacro:arg name="izz_2" default="'${(mass_2/6)*(side*side)}'"/>
  
  <xacro:arg name="ixy_1" default="0"/>
  <xacro:arg name="ixz_1" default="0"/>
  <xacro:arg name="iyz_1" default="0"/> 
  <xacro:arg name="ixy_2" default="0"/>
  <xacro:arg name="ixz_2" default="0"/>  
  <xacro:arg name="iyz_2" default="0"/>
  
  <!-- we need to use a <xacro:if> </xacro:if> to use a formula as default value for an argument -->
  <xacro:property name="ixx_1_valid" value="$(arg ixx_1)"/>  
  <xacro:if value="${ixx_1_valid > 0}">  
	<xacro:property name="ixx_1" value="$(arg ixx_1)"/>  
  </xacro:if>
  <xacro:unless value="${ixx_1_valid > 0}">  
    <xacro:property name="ixx_1" value="${(mass_1/12)*(side*side+length_1*length_1)}"/> 
  </xacro:unless>
  
  <xacro:property name="ixx_2_valid" value="$(arg ixx_2)"/>  
  <xacro:if value="${ixx_2_valid > 0}">  
	<xacro:property name="ixx_2" value="$(arg ixx_2)"/>  
  </xacro:if>
  <xacro:unless value="${ixx_2_valid > 0}">  
    <xacro:property name="ixx_2" value="${(mass_2/12)*(side*side+length_2*length_2)}"/> 
  </xacro:unless>
  
   
  <xacro:property name="iyy_1" value="$(arg iyy_1)"/>
  <xacro:property name="izz_1" value="$(arg izz_1)"/>
  <xacro:property name="iyy_2" value="$(arg iyy_2)"/>
  <xacro:property name="izz_2" value="$(arg izz_2)"/>
  
  <xacro:property name="ixy_1" value="$(arg ixy_1)"/>
  <xacro:property name="ixz_1" value="$(arg ixz_1)"/>
  <xacro:property name="iyz_1" value="$(arg iyz_1)"/>
  <xacro:property name="ixy_2" value="$(arg ixy_2)"/>
  <xacro:property name="ixz_2" value="$(arg ixz_2)"/>
  <xacro:property name="iyz_2" value="$(arg iyz_2)"/>
  
  
  <xacro:arg name="com_1" default="'${length_1/2}'"/> 
  <xacro:arg name="com_2" default="'${length_2/2}'"/> 
  
  <xacro:property name="com_1_valid" value="$(arg com_1)"/>  
  <xacro:if value="${com_1_valid > 0}">  
	<xacro:property name="com_1" value="$(arg com_1)"/>  
  </xacro:if>
  <xacro:unless value="${com_1_valid > 0}">  
    <xacro:property name="com_1" value="${length_1/2}"/> 
  </xacro:unless>

  <xacro:property name="com_2_valid" value="$(arg com_2)"/>  
  <xacro:if value="${com_2_valid > 0}">  
	<xacro:property name="com_2" value="$(arg com_2)"/>  
  </xacro:if>
  <xacro:unless value="${com_2_valid > 0}">  
    <xacro:property name="com_2" value="${length_2/2}"/> 
  </xacro:unless>
 
  


  <!-- 	___________Materials___________	-->
  

  <material name="orange">
    <color rgba="1.00 0.67 0.02 1.00"/>
  </material>

  <material name="gray">
    <color rgba="0.80 0.80 0.80 1.00"/>
  </material>
  
  <material name="red">
	   <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  
  
  
    <!-- 	___________Joints Control in Gazebo___________	-->
  

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"/>
  </gazebo>
  


<!-- __________________________________________________________LINK__________________________________________________________ -->


  
<!-- World frame (for Gazebo) -->

  <link name="world"/>
  
  
 <!-- Base_link -->
 
 
 <link name="base_link">
	 	 <inertial>
		 <mass value="0.0001"/>
		 <inertia ixx="0"
               iyy="0"
               izz="0"
               ixy="0" ixz="0" iyz="0"/>
	 </inertial>
	 </link>
	  
	  
<!-- Link1 -->  

	  
 <link name="link1">
	
	 
	 <visual>
		 	 <origin xyz="0 0 ${length_1/2}" rpy="0 0 0"/>
	 <geometry>
		 <box size="${side} ${side} ${length_1}"/>		 
			<material name="orange"/>
	 </geometry>
	 </visual>
	 
	 <inertial>
		 <origin xyz="0 0 ${com_1}" rpy="0 0 0"/>		 
		 <mass value="${mass_1}"/>
		 <inertia ixx="${ixx_1}"
               iyy="${iyy_1}"
               izz="${izz_1}"
               ixy="${ixy_1}" ixz="${ixz_1}" iyz="${iyz_1}"/>
	 </inertial>

</link>


  <gazebo reference="link1">
    <material>Gazebo/Red</material>
  </gazebo>


  <!-- Link2 -->
  
  
  <link name="link2">
	  
	  <visual>
		  <origin xyz="0 0 ${length_2/2}" rpy="0 0 0"/>
	  <geometry>
		  
		  <box size="${side} ${side} ${length_2}"/>
		 
			<material name="orange"/>
	  </geometry>
	</visual>
	 
	 <inertial>
		 <origin xyz="0 0 ${com_2}" rpy="0 0 0"/>
		 <mass value="${mass_2}"/>
		 <inertia ixx="${ixx_2}"
               iyy="${iyy_2}"
               izz="${izz_2}"
               ixy="${ixy_2}" ixz="${ixz_2}" iyz="${iyz_2}"/>
	 </inertial>
	 	 
  </link>

  <gazebo reference="link2">
    <material>Gazebo/Red</material>
  </gazebo>
  
    

  
  <!-- ________________________________________________________JOINT________________________________________________________ -->
  
  
  
  <!-- Base_link fixed to world frame  -->
  <!-- To change the orientation of the arm, change the rpy (roll, pitch, yaw) parameter only here -->
    
  <joint name="world_foot_joint" type="fixed">
	<origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
    <parent link="world"/>
    <child link="base_link"/>
  </joint>
  
  
  <!--______________ Shoulder ____________-->
  
    <!-- Creating the joint -->
    
  <joint name="shoulder" type="revolute">
	  <origin xyz="0 0 0" rpy="0 0 0"/>
	  <parent link="base_link"/>
	  <child link="link1"/>
	  <!--  The joint revolute around the x axis-->
	  <axis xyz="1 0 0"/>
      <limit effort="100.0"
             velocity="10.0"
             lower="${-PI}"
             upper="${PI}"/>
  </joint>
  
  
  <!-- Required for ROS control, the "transmission" field enable to link a joint with an actuator -->
   
    <transmission name="shoulder_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="shoulder">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="shoulder_actuator"/>
    </transmission>
    
      <!--Creating a visual for the joints-->
  
    <joint name="shoulder_fixed" type="fixed">
        <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
        <parent link="base_link"/>
        <child link="link1_fixed"/>
    </joint>

    <link name="link1_fixed">
      <visual>
        <geometry>
          <cylinder length="${joint_length}" radius="${joint_radius}"/>
        </geometry>
        <material name="gray"/>
      </visual>
    </link>
    
    
    
  <!--______________ Elbow ____________-->
  
  
      <!-- Creating the joint -->
     
  
  <joint name="elbow" type="revolute">
	  <origin xyz="0 0 ${length_1}" rpy="0 0 0"/>
	  <parent link="link1"/>
	  <child link="link2"/>
	  <!--  The joint revolute around the x axis-->
	  <axis xyz="1 0 0"/>
      <limit effort="100.0"
             velocity="10.0"
             lower="${-PI}"
             upper="${PI}"/>
  </joint>
  
    <!-- Required for ROS control -->
   
    <transmission name="elbow_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="elbow">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="elbow_actuator"/>
    </transmission>
  
  
    <!--Creating a visual for the joints-->
  
    <joint name="elbow_fixed" type="fixed">
        <origin xyz="0 0 ${length_1}" rpy="0 ${PI/2} 0"/>
        <parent link="link1"/>
        <child link="link2_fixed"/>
    </joint>

    <link name="link2_fixed">
      <visual>
        <geometry>
          <cylinder length="${joint_length}" radius="${joint_radius}"/>
        </geometry>
        <material name="gray"/>
      </visual>
    </link>
  
  
   <!-- _______________________________________________________CAMERA_______________________________________________________ -->


 
  <!-- Camera not well defined-> go to 0, 0, 0 -->
  
   <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>
  
   <joint name="camera_joint" type="fixed">
    <origin xyz="0 0 ${length_2}" rpy="${-PI/2} 0 ${-PI/2}"/>
    <parent link="link2"/>
    <child link="camera_link"/>
  </joint>
    
    
  
   <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">      
      <update_rate>30.0</update_rate>
      <camera name="head">
        <!-- Gazebo uses X as the optical axis -->
          <visualize>true</visualize>
          <pose>0 0 0 0 ${-PI/2} ${PI/2}</pose>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>robot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  
</robot>
